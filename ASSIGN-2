#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;


class Person {
protected:
    string name, ID, contactInfo;
    int age;

public:
    Person(string n, int a, string id, string contact) {
        setName(n);
        setAge(a);
        ID = id;
        contactInfo = contact;
    }

    virtual ~Person() {}

    void setName(string n) {
        name = (!n.empty()) ? n : "Unknown";
    }

    void setAge(int a) {
        age = (a > 0 && a < 120) ? a : 18;
    }

    virtual void displayDetails() const {
        cout << "Name: " << name << ", Age: " << age << ", ID: " << ID
             << ", Contact: " << contactInfo << endl;
    }

    virtual double calculatePayment() const = 0;
    string getID() const { return ID; }
};


class Student : public Person {
    string program, enrollmentDate;
    double GPA;

public:
    Student(string n, int a, string id, string contact,
            string enroll, string prog, double gpa)
        : Person(n, a, id, contact), enrollmentDate(enroll), program(prog) {
        setGPA(gpa);
    }

    void setGPA(double g) {
        GPA = (g >= 0.0 && g <= 4.0) ? g : 0.0;
    }

    double getGPA() const { return GPA; }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Program: " << program << ", Enrollment Date: " << enrollmentDate
             << ", GPA: " << GPA << endl;
    }

    double calculatePayment() const override {
        return 1500 + (4.0 - GPA) * 100; 
    }
};


class Professor : public Person {
    string department, specialization, hireDate;

public:
    Professor(string n, int a, string id, string contact,
              string dept, string spec, string hire)
        : Person(n, a, id, contact), department(dept),
          specialization(spec), hireDate(hire) {}

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Department: " << department << ", Specialization: "
             << specialization << ", Hire Date: " << hireDate << endl;
    }

    double calculatePayment() const override {
        return 5000; 
    }
};


class Course {
    string code, title, description;
    int credits;

public:
    Course(string c, string t, int cr, string d)
        : code(c), title(t), description(d) {
        setCredits(cr);
    }

    void setCredits(int c) {
        credits = (c > 0) ? c : 1;
    }

    void displayDetails() const {
        cout << "Course Code: " << code << ", Title: " << title
             << ", Credits: " << credits << ", Description: " << description << endl;
    }

    string getCode() const { return code; }
};


class Department {
    string name, location;
    double budget;

public:
    Department(string n, string l, double b)
        : name(n), location(l), budget((b > 0) ? b : 0) {}

    void displayDetails() const {
        cout << "Department: " << name << ", Location: " << location
             << ", Budget: $" << budget << endl;
    }
};


class GradeBook {
    vector<string> studentIDs;
    vector<double> grades;

public:
    void addGrade(string id, double grade) {
        if (grade >= 0 && grade <= 100) {
            studentIDs.push_back(id);
            grades.push_back(grade);
        }
    }

    double getAverage() const {
        double sum = 0;
        for (double g : grades) sum += g;
        return grades.empty() ? 0 : sum / grades.size();
    }

    void getFailingStudents() const {
        for (size_t i = 0; i < grades.size(); ++i) {
            if (grades[i] < 50)
                cout << "Failing: " << studentIDs[i] << " - Grade: " << grades[i] << endl;
        }
    }
};


class EnrollmentManager {
    string courseCode;
    vector<string> enrolledStudents;

public:
    EnrollmentManager(string code) : courseCode(code) {}

    void enrollStudent(string studentID) {
        enrolledStudents.push_back(studentID);
    }

    void dropStudent(string studentID) {
        enrolledStudents.erase(remove(enrolledStudents.begin(), enrolledStudents.end(), studentID),
                               enrolledStudents.end());
    }

    int getEnrollmentCount() const {
        return enrolledStudents.size();
    }
};


int main() {
    Student s1("TIA", 18, "S001", "tia12@ncu.edu", "2024-09-02", "CS", 3.9);
    Student s2("GEET", 22, "S002", "geet32@ncu.edu", "2021-01-10", "DS", 3.3);
    Professor p1("Dr. TYAGI", 50, "P001", "tyagi23@ncu.edu", "CS", "AI", "2010-08-01");

    Course c1("CS101", "Intro to CS", 3, "Learn programming basics");
    Department d1("Computer Science", "Building A", 100000);

    GradeBook gb;
    gb.addGrade("S001", 88);
    gb.addGrade("S002", 42);

    EnrollmentManager em("CS101");
    em.enrollStudent("S001");
    em.enrollStudent("S002");

    vector<Person*> people = { &s1, &s2, &p1 };
    for (Person* p : people) {
        p->displayDetails();
        cout << "Payment: $" << p->calculatePayment() << endl << endl;
    }

    c1.displayDetails();
    d1.displayDetails();

    cout << "\nGradeBook Average: " << gb.getAverage() << endl;
    gb.getFailingStudents();

    cout << "\nEnrollment in CS101: " << em.getEnrollmentCount() << endl;

    return 0;
}
